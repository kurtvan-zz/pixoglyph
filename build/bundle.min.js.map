{"version":3,"sources":["webpack:///webpack/bootstrap 5042ac84155784d1a1b4?2d2d","webpack:///./View.js?e38f"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;;;AAGA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,UAAU;AAC7B;AACA,mBAAmB,QAAQ;AAC3B;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,iBAAiB;AAC5C,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,mBAAmB,UAAU;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,kBAAkB;AAC/C,oCAAoC,oBAAoB;AACxD;AACA;AACA;;;;AAIA;;AAEA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;;AAEA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC","file":"bundle.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5042ac84155784d1a1b4","\"use strict\";\n\n\n( function(window, document) {\n    class View {\n\n        /** Construct a new View instance\n         * @param {number} height - the height of the View, in characters\n         * @param {number} width - the width of the View, in characters\n         * @param {character} backgroundChar - character to as a default when no\n         * other character has been set\n         * @param {boolean} continuous - flag determining whether this View renders\n         * repeatedly (in a continuous manner), or in a more event bases manner\n         * @param {number} fps - if the rendering is done continuously, this defines\n         * how many times per second the View will render\n         */\n        constructor(width, height, backgroundChar, continuous, fps) {\n            this.height = height;\n            this.width = width;\n            this.continuous = continuous || false;\n            this.fps = fps || -1;\n            this.mountElement = undefined;\n            this.units = [];\n\n            this.backgroundChar = (backgroundChar || ' ')[0];\n\n            this.renderString = (backgroundChar.repeat(this.width) + '\\n').repeat(this.height);\n\n            // the color array, which maps each index to a color\n            this.resetColors();\n\n            // this element holds the actual text\n            this.wrapperElement = document.createElement('pre');\n        }\n\n        /** Associate this view with a given DOM element\n         * @param {Element} - the element that this View will be inserted into\n         */\n        mount(el) {\n            if (typeof el === 'string')\n                this.mountElement = document.getElementById(el);\n            else\n                this.mountElement = el;\n\n            // stuff a bunch of span elements into the wrapper\n            let curCharElement;\n            for (let i = 0; i < this.height; i++) {\n                for (let j = 0; j <= this.width; j++) {\n                    curCharElement = document.createElement('span');\n                    if (j == this.width)\n                        curCharElement.innerHTML = \"\\n\";\n                    else\n                        curCharElement.innerHTML = this.getChar(j, i);\n                    curCharElement.style.color = this.getCharColor(i, j);\n                    this.wrapperElement.appendChild(curCharElement)\n                }\n            }\n\n            // only add wrapper to the page after all spans are added\n            this.mountElement.appendChild(this.wrapperElement);\n\n            return this.mountElement;\n        }\n\n        /** Write the current state of the View to the mounted DOM element\n         */\n        render() {\n            if (!this.mountElement || !this.wrapperElement) {\n                return null;\n            }\n\n            let DOMChars = this.wrapperElement.children;\n            let x = 0\n            let y = 0;\n\n            for (let i = 0; i < DOMChars.length; i++) {\n                if (DOMChars[i].textContent != '\\n') {\n                    DOMChars[i].textContent = this.getChar(x, y);\n                    DOMChars[i].style.color = this.getCharColor(x, y);\n                    x++;\n                } else {\n                    x = 0;\n                    y++;\n                }\n            }\n        }\n\n        /** Clear all characters and replace them with the background char\n         */\n        clear() {\n            if (this.mountElement && this.wrapperElement) {\n                this.renderString = (this.backgroundChar.repeat(this.width) + '\\n').repeat(this.height);\n            }\n        }\n\n        /** Get the current state of the View as an array of strings\n         */\n        getStringArray() {\n            return this.renderString.split(\"\\n\").slice(0, this.height);\n        }\n\n        /** Get the character that lies at the specified x, y location\n         * @param {integer} x - the x coordinate of the character\n         * @param {integer} y - the y coordinate of the character\n         */\n        getChar(x, y) {\n            if (x >= this.width || y >= this.height)\n                return undefined;\n            if (x < 0 || y < 0)\n                return undefined;\n\n            return this.getStringArray()[y][x];\n        }\n\n        /** Set a single character on the view\n         * @param {integer} x - the x coordinate of the character\n         * @param {integer} y - the y coordinate of the character\n         * @param {character} newChar - the new character to insert\n         */\n        setChar(x, y, newChar) {\n\n            // check that the coordinates are within the view\n            if (x >= this.width || y >= this.height)\n                return undefined;\n            if (x < 0 || y < 0)\n                return undefined;\n\n            let newString = this.renderString.split(\"\\n\");\n\n            console.log(x, y);\n\n            // mutate the string array so that the next render reflects this change\n            newString[y] = newString[y].slice(0, x) + newChar + newString[y].slice(x + 1);\n            newString = newString.join(\"\\n\");\n            this.renderString = newString;\n            return this.renderString;\n        }\n\n        /** Get the color of the character at the specified location\n         * @param {integer} x - the x coordinate of the character\n         * @param {integer} y - the y coordinate of the character\n         */\n        getCharColor(x, y) {\n            if (x >= this.width || y >= this.height)\n                return undefined;\n            if (x < 0 || y < 0)\n                return undefined;\n\n            return this.colorArray[y][x];\n        }\n\n        /** Set a single characters color on the view\n         * @param {integer} x - the x coordinate of the character\n         * @param {integer} y - the y coordinate of the character\n         */\n        setCharColor(x, y, color) {\n            if (x >= this.width || y >= this.height)\n                return undefined;\n            if (x < 0 || y < 0)\n                return undefined;\n\n            this.colorArray[y][x] = color;\n            return this.colorArray[y][x];\n        }\n\n        getCharBackgroundColor(x, y) {}\n\n        setCharBackgroundColor(x, y, color) {\n            // TODO\n        }\n\n        resetColors() {\n            let curRow;\n            this.colorArray = [];\n            for (let i = 0; i < this.height; i++) {\n                curRow = [];\n                for (let j = 0; j < this.width; j++) {\n                    curRow.push('inherit');\n                }\n                this.colorArray.push(curRow);\n            }\n        }\n\n        rect(x, y, width, height, border) {\n            let i;\n            // horizontal lines\n            for (i = 0; i < width; i++) {\n                this.setChar(x + i, y, border);\n                this.setChar(x + i, y + height - 1, border);\n            }\n\n            // vertical\n            for (i = 0; i < height; i++) {\n                this.setChar(x, y + i, border);\n                this.setChar(x + width, y + i, border);\n            }\n        }\n\n        fillRect(x, y, width, height, border, fill) {\n            for (let row = y; row < height + y; row++) {\n                for (let column = x; column < width + x; column++) {\n                    this.setChar(column, row, fill);\n                }\n            }\n\n\n\n        }\n\n        text(x, y, text) {\n            for (let i = 0; i < text.length; i++) {\n                this.setChar(x + i, y, text[i]);\n            }\n        }\n\n        verticalText(x, y, text) {\n            for (let i = 0; i < text.length; i++) {\n                this.setChar(x, y + i, text[i]);\n            }\n        }\n\n        line(x0, y0, x1, y1) {\n            // TODO\n            // https://en.wikipedia.org/wiki/Line_drawing_algorithm\n\n            // form an array of (x,y) coordinates using Bresenhams algo, and then\n            // plot each one\n\n            let pairs = [];\n\n            // let deltaX = x1 - x0;\n            // let deltaY = y1 - y0;\n            // let deltaErr = deltaY / deltaX;\n            // let error = deltaErr - 0.5\n            //\n            // let y = Math.min(y0, y1);\n            // for(let x = x0; x <= x1; x++) {\n            //     console.log([x, y]);\n            //     pairs.push([x, y]);\n            //     error += deltaErr;\n            //     if (error >= 0.5) {\n            //         y++;\n            //         error = error - 1;\n            //     }\n            // }\n\n            console.log(pairs.length);\n\n            for (let i = 0; i < pairs.length; i++) {\n                console.log(pairs[i][0], pairs[i][1]);\n                this.setChar(pairs[i][0], pairs[i][1], \"T\");\n            }\n\n            this.render();\n        }\n    }\n\n    window.View = View;\n} )(window, document);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./View.js\n// module id = 0\n// module chunks = 0 1"],"sourceRoot":""}