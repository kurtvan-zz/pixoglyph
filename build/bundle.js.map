{"version":3,"sources":["webpack:///webpack/bootstrap abb88e15c3470cc4c8bc","webpack:///./pixoglyph.js"],"names":["window","document","Pixoglyph","width","height","backgroundChar","mountElement","undefined","renderString","repeat","resetColors","wrapperElement","createElement","el","getElementById","curCharElement","i","j","innerHTML","getChar","style","color","getCharColor","backgroundColor","getCharBackgroundColor","appendChild","DOMChars","children","x","y","length","textContent","split","slice","getStringArray","newChar","newString","console","log","join","colorArray","backgroundColorArray","curRow","push","borderChar","setChar","fillChar","rect","row","column","text","x0","y0","x1","y1","pairs","render"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap abb88e15c3470cc4c8bc","\"use strict\";\n\n(function(window, document) {\n    class Pixoglyph {\n        /** Construct a new Pixoglyph instance\n         * @param {number} height - the height of the View, in characters\n         * @param {number} width - the width of the View, in characters\n         * @param {character} backgroundChar - character to as a default when no\n         * other character has been set\n         */\n        constructor(width, height, backgroundChar) {\n            this.height = height;\n            this.width = width;\n            this.mountElement = undefined;\n\n            this.backgroundChar = (backgroundChar || ' ')[0];\n            this.renderString = (backgroundChar.repeat(this.width) + '\\n').repeat(this.height);\n\n            // the color array, which maps each index to a color\n            this.resetColors();\n\n            // this element holds the actual text\n            this.wrapperElement = document.createElement('pre');\n        }\n\n        /** Associate this view with a given DOM element\n         * @param {Element} - the element that this View will be inserted into\n         */\n        mount(el) {\n            if (this.mountElement) {\n                return null;\n            }\n            if (typeof el === 'string')\n                this.mountElement = document.getElementById(el);\n            else\n                this.mountElement = el;\n\n            // stuff a bunch of span elements into the wrapper\n            let curCharElement;\n            for (let i = 0; i < this.height; i++) {\n                for (let j = 0; j <= this.width; j++) {\n                    curCharElement = document.createElement('span');\n                    if (j == this.width)\n                        curCharElement.innerHTML = \"\\n\";\n                    else\n                        curCharElement.innerHTML = this.getChar(j, i);\n\n                    curCharElement.style.color = this.getCharColor(i, j);\n                    curCharElement.style.backgroundColor = this.getCharBackgroundColor(i, j);\n                    this.wrapperElement.appendChild(curCharElement)\n                }\n            }\n            // only add wrapper to the page after all spans are added\n            this.mountElement.appendChild(this.wrapperElement);\n            return this.mountElement;\n        }\n\n        /** Write the current state of the View to the mounted DOM element\n         */\n        render() {\n            if (!this.mountElement || !this.wrapperElement) {\n                return null;\n            }\n\n            let DOMChars = this.wrapperElement.children;\n            let x = 0\n            let y = 0;\n\n            for (let i = 0; i < DOMChars.length; i++) {\n                if (DOMChars[i].textContent != '\\n') {\n                    DOMChars[i].textContent = this.getChar(x, y);\n                    DOMChars[i].style.color = this.getCharColor(x, y);\n                    DOMChars[i].style.backgroundColor = this.getCharBackgroundColor(x, y);\n                    x++;\n                } else {\n                    x = 0;\n                    y++;\n                }\n            }\n        }\n\n        /** Clear all characters and replace them with the background char\n         */\n        clear() {\n            if (this.mountElement && this.wrapperElement) {\n                this.renderString = (this.backgroundChar.repeat(this.width) + '\\n').repeat(this.height);\n            }\n        }\n\n        /** Get the current state of the View as an array of strings\n         */\n        getStringArray() {\n            return this.renderString.split(\"\\n\").slice(0, this.height);\n        }\n\n        /** Get the character that lies at the specified x, y location\n         * @param {integer} x - the x coordinate of the character\n         * @param {integer} y - the y coordinate of the character\n         */\n        getChar(x, y) {\n            if (x >= this.width || y >= this.height)\n                return undefined;\n            if (x < 0 || y < 0)\n                return undefined;\n\n            return this.getStringArray()[y][x];\n        }\n\n        /** Set a single character on the view\n         * @param {integer} x - the x coordinate of the character\n         * @param {integer} y - the y coordinate of the character\n         * @param {character} newChar - the new character to insert\n         */\n        setChar(x, y, newChar) {\n\n            // check that the coordinates are within the view\n            if (x >= this.width || y >= this.height)\n                return undefined;\n            if (x < 0 || y < 0)\n                return undefined;\n\n            let newString = this.renderString.split(\"\\n\");\n\n            console.log(x, y);\n\n            // mutate the string array so that the next render reflects this change\n            newString[y] = newString[y].slice(0, x) + newChar + newString[y].slice(x + 1);\n            newString = newString.join(\"\\n\");\n            this.renderString = newString;\n            return this.renderString;\n        }\n\n        /** Get the color of the character at the specified location\n         * @param {integer} x - the x coordinate of the character\n         * @param {integer} y - the y coordinate of the character\n         */\n        getCharColor(x, y) {\n            if (x >= this.width || y >= this.height)\n                return undefined;\n            if (x < 0 || y < 0)\n                return undefined;\n\n            return this.colorArray[y][x];\n        }\n\n        /** Set a single characters color on the view\n         * @param {integer} x - the x coordinate of the character\n         * @param {integer} y - the y coordinate of the character\n         */\n        setCharColor(x, y, color) {\n            if (x >= this.width || y >= this.height)\n                return undefined;\n            if (x < 0 || y < 0)\n                return undefined;\n\n            console.log('before: ' + this.colorArray[y][x], this.backgroundColorArray[y][x]);\n            this.colorArray[y][x] = color;\n            console.log('after: ' + this.colorArray[y][x], this.backgroundColorArray[y][x]);\n            return this.colorArray[y][x];\n        }\n\n        /** Get the current background color for a given character in the View\n         * @param {integer} x - the x coordinate of the character\n         * @param {integer} y - the y coordinate of the character\n         */\n        getCharBackgroundColor(x, y) {\n            if (x >= this.width || y >= this.height)\n                return undefined;\n            if (x < 0 || y < 0)\n                return undefined;\n\n            return this.backgroundColorArray[y][x];\n        }\n\n        /** Set the bacground color of the given character in the View\n         * @param {integer} x - the x coordinate of the character\n         * @param {integer} y - the y coordinate of the character\n         */\n        setCharBackgroundColor(x, y, color) {\n            if (x >= this.width || y >= this.height)\n                return undefined;\n            if (x < 0 || y < 0)\n                return undefined;\n\n            this.backgroundColorArray[y][x] = color;\n            return this.backgroundColorArray[y][x];\n        }\n\n        /** Reset all of the colors and background colors to their default\n         *  values\n         */\n        resetColors() {\n            let curRow;\n            this.colorArray = [];\n            this.backgroundColorArray = [];\n            for (let i = 0; i < this.height; i++) {\n                curRow = [];\n                for (let j = 0; j < this.width; j++) {\n                    curRow.push('inherit');\n                }\n                this.colorArray.push(curRow);\n                this.backgroundColorArray.push(curRow.slice());\n            }\n        }\n\n        /** Draw an unfilled rectangle using the specified character onto the View\n         * @param {integer} x - the x coordinate of the top left of the rectangle\n         * @param {integer} y - the y coordinate of the top left of the rectangle\n         * @param {integer} width - the width of the rectangle\n         * @param {integer} height - the height of the rectangle\n         * @param {integer} borderChar - the character to use for the border of\n         * the rectangle\n         */\n        rect(x, y, width, height, borderChar) {\n            let i;\n            // horizontal lines\n            for (i = 0; i < width; i++) {\n                this.setChar(x + i, y, borderChar);\n                this.setChar(x + i, y + height - 1, borderChar);\n            }\n\n            // vertical lines\n            for (i = 0; i < height; i++) {\n                this.setChar(x, y + i, borderChar);\n                this.setChar(x + width, y + i, borderChar);\n            }\n        }\n\n        /** Draw a filled rectangle using the specified border and fill characters\n         * @param {integer} x - the x coordinate of the top left of the rectangle\n         * @param {integer} y - the y coordinate of the top left of the rectangle\n         * @param {integer} width - the width of the rectangle\n         * @param {integer} height - the height of the rectangle\n         * @param {String} borderChar - the character to use for the border of\n         * the rectangle\n         * @param {String} fillChar - the character to use for the inside of the\n         * rectangle\n         */\n        fillRect(x, y, width, height, borderChar, fillChar) {\n            this.rect(x, y, width, height, borderChar);\n            for (let row = y + 1; row < height + y - 1; row++) {\n                for (let column = x + 1; column < width + x; column++) {\n                    this.setChar(column, row, fillChar || this.backgroundChar);\n                }\n            }\n        }\n\n        /** Write a horizontal line of text to the view from left to right,\n         * starting at position (x, y).\n         * @param {integer} x - the starting x position of the text\n         * @param {integer} y - the starting y position of the text\n         */\n        text(x, y, text) {\n            for (let i = 0; i < text.length; i++) {\n                this.setChar(x + i, y, text[i]);\n            }\n        }\n\n        /** Write a vertical line of text to the view from top to bottom,\n         * starting at position (x, y).\n         * @param {integer} x - the starting x position of the text\n         * @param {integer} y - the starting y position of the text\n         */\n        verticalText(x, y, text) {\n            for (let i = 0; i < text.length; i++) {\n                this.setChar(x, y + i, text[i]);\n            }\n        }\n\n        line(x0, y0, x1, y1) {\n            // TODO\n            // https://en.wikipedia.org/wiki/Line_drawing_algorithm\n\n            // form an array of (x,y) coordinates using Bresenhams algo, and then\n            // plot each one\n\n            let pairs = [];\n\n            // let deltaX = x1 - x0;\n            // let deltaY = y1 - y0;\n            // let deltaErr = deltaY / deltaX;\n            // let error = deltaErr - 0.5\n            //\n            // let y = Math.min(y0, y1);\n            // for(let x = x0; x <= x1; x++) {\n            //     console.log([x, y]);\n            //     pairs.push([x, y]);\n            //     error += deltaErr;\n            //     if (error >= 0.5) {\n            //         y++;\n            //         error = error - 1;\n            //     }\n            // }\n\n            console.log(pairs.length);\n\n            for (let i = 0; i < pairs.length; i++) {\n                console.log(pairs[i][0], pairs[i][1]);\n                this.setChar(pairs[i][0], pairs[i][1], \"T\");\n            }\n\n            this.render();\n        }\n    }\n    window.Pixoglyph = Pixoglyph;\n})(window, document);\n\n\n\n// WEBPACK FOOTER //\n// ./pixoglyph.js"],"sourceRoot":""}